/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chirica;

import java.awt.Cursor;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * This project was created for educational purposes. Copyright (c) 2022. All
 * rights reserved.
 *
 * @author Stefan Chirica
 */
//Attack
public class Pound extends javax.swing.JFrame {

    final int POUND_SIZE = 20;
    int currentDog;

    ArrayList<Dog> dogs = new ArrayList();

    /**
     * Creates new form Pound
     */
    public Pound() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        displayPanel = new javax.swing.JPanel();
        iconLabel = new javax.swing.JLabel();
        messageLabel = new javax.swing.JLabel();
        controlPanel = new javax.swing.JPanel();
        eatButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        barkButton = new javax.swing.JButton();
        sleepButton = new javax.swing.JButton();
        poopButton = new javax.swing.JButton();
        peeButton = new javax.swing.JButton();
        sitButton = new javax.swing.JButton();
        selectButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        newDogButton = new javax.swing.JButton();
        attackButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        fetchButton = new javax.swing.JButton();
        letGoButton = new javax.swing.JButton();
        statsPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        breedLabel = new javax.swing.JLabel();
        colorLabel = new javax.swing.JLabel();
        genderLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        fixedLabel = new javax.swing.JLabel();
        trainedLabel = new javax.swing.JLabel();
        heightLabel = new javax.swing.JLabel();
        weightLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        descriptionLabel = new javax.swing.JLabel();
        energyProgressBar = new javax.swing.JProgressBar();
        energyLabel = new javax.swing.JLabel();
        hungerLabel = new javax.swing.JLabel();
        aggressionLabel = new javax.swing.JLabel();
        hungerProgressBar = new javax.swing.JProgressBar();
        aggressionProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        displayPanel.setPreferredSize(new java.awt.Dimension(380, 350));

        iconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chirica/dog1s20release.png"))); // NOI18N

        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayPanelLayout.createSequentialGroup()
                .addGap(0, 16, Short.MAX_VALUE)
                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9))
        );

        controlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Control Panel\n"));

        eatButton.setText("Eat");
        eatButton.setEnabled(false);
        eatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eatButtonActionPerformed(evt);
            }
        });

        runButton.setText("Run");
        runButton.setEnabled(false);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        barkButton.setText("Bark");
        barkButton.setEnabled(false);
        barkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barkButtonActionPerformed(evt);
            }
        });

        sleepButton.setText("Sleep");
        sleepButton.setEnabled(false);
        sleepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sleepButtonActionPerformed(evt);
            }
        });

        poopButton.setText("Poop");
        poopButton.setEnabled(false);
        poopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poopButtonActionPerformed(evt);
            }
        });

        peeButton.setText("Pee");
        peeButton.setEnabled(false);
        peeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peeButtonActionPerformed(evt);
            }
        });

        sitButton.setText("Sit");
        sitButton.setEnabled(false);
        sitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sitButtonActionPerformed(evt);
            }
        });

        selectButton.setText("Select Dog");
        selectButton.setEnabled(false);
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        newDogButton.setText("New");
        newDogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDogButtonActionPerformed(evt);
            }
        });

        attackButton.setText("Attack");
        attackButton.setEnabled(false);
        attackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attackButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Dog");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        fetchButton.setText("Fetch");
        fetchButton.setEnabled(false);
        fetchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fetchButtonActionPerformed(evt);
            }
        });

        letGoButton.setText("Let Go");
        letGoButton.setEnabled(false);
        letGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                letGoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(barkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(eatButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addComponent(poopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(peeButton)
                                .addGap(19, 19, 19))
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addComponent(fetchButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(letGoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sleepButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteButton)))
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(newDogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(openButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectButton)
                    .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(attackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sitButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        controlPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {attackButton, barkButton, deleteButton, eatButton, fetchButton, letGoButton, newDogButton, openButton, peeButton, poopButton, runButton, saveButton, selectButton, sitButton, sleepButton, updateButton});

        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runButton)
                    .addComponent(barkButton)
                    .addComponent(eatButton)
                    .addComponent(sitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attackButton)
                    .addComponent(sleepButton)
                    .addComponent(peeButton)
                    .addComponent(poopButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(selectButton)
                    .addComponent(fetchButton)
                    .addComponent(letGoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newDogButton)
                    .addComponent(openButton)
                    .addComponent(saveButton)
                    .addComponent(updateButton))
                .addContainerGap())
        );

        statsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Dog Stats"));

        nameLabel.setText("Name: ");

        breedLabel.setText("Breed: ");

        colorLabel.setText("Color:");

        genderLabel.setText("Gender: ");

        ageLabel.setText("Age: ");

        fixedLabel.setText("Spayed/Neutered: ");

        trainedLabel.setText("Trained: ");

        heightLabel.setText("Height: ");

        weightLabel.setText("Weight: ");

        descriptionTextArea.setEditable(false);
        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setEnabled(false);
        jScrollPane1.setViewportView(descriptionTextArea);

        descriptionLabel.setText("Description:");

        energyLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        energyLabel.setText("Energy: ");

        hungerLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        hungerLabel.setText("Hunger: ");

        aggressionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        aggressionLabel.setText("Aggression: ");

        javax.swing.GroupLayout statsPanelLayout = new javax.swing.GroupLayout(statsPanel);
        statsPanel.setLayout(statsPanelLayout);
        statsPanelLayout.setHorizontalGroup(
            statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statsPanelLayout.createSequentialGroup()
                        .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(aggressionLabel)
                            .addComponent(hungerLabel)
                            .addComponent(energyLabel))
                        .addGap(18, 18, 18)
                        .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hungerProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(aggressionProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(energyProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(breedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(colorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(heightLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(weightLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(genderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fixedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(trainedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(descriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE))
                .addContainerGap())
        );
        statsPanelLayout.setVerticalGroup(
            statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLabel)
                .addGap(18, 18, 18)
                .addComponent(breedLabel)
                .addGap(18, 18, 18)
                .addComponent(colorLabel)
                .addGap(18, 18, 18)
                .addComponent(ageLabel)
                .addGap(16, 16, 16)
                .addComponent(heightLabel)
                .addGap(18, 18, 18)
                .addComponent(weightLabel)
                .addGap(18, 18, 18)
                .addComponent(genderLabel)
                .addGap(18, 18, 18)
                .addComponent(fixedLabel)
                .addGap(18, 18, 18)
                .addComponent(trainedLabel)
                .addGap(18, 18, 18)
                .addComponent(descriptionLabel)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(energyLabel)
                    .addComponent(energyProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hungerLabel)
                    .addComponent(hungerProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(statsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aggressionLabel)
                    .addComponent(aggressionProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(statsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addComponent(statsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Plays an eating animation and enables poop button after eating
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void eatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eatButtonActionPerformed
        boolean poopEnabled = poopButton.isEnabled();

        messageLabel.setText("");
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        disableButtons();
        dogs.get(currentDog).eat();
        enableButtons(poopEnabled);
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        eatButton.setEnabled(false);
        poopButton.setEnabled(true);
    }//GEN-LAST:event_eatButtonActionPerformed

    /**
     * Disables all buttons, plays bark sound, and reenables all buttons that
     * were previously enabled
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void barkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barkButtonActionPerformed
        boolean poopEnabled = poopButton.isEnabled();

        messageLabel.setText("");
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        disableButtons();
        dogs.get(currentDog).bark();
        enableButtons(poopEnabled);
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_barkButtonActionPerformed

    /**
     * Disables all buttons, plays sleeping animation until dog's energy is at
     * 100%, and reenables all buttons that were previously enabled
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void sleepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sleepButtonActionPerformed
        boolean poopEnabled = poopButton.isEnabled();

        messageLabel.setText("");
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        disableButtons();
        dogs.get(currentDog).sleep();
        enableButtons(poopEnabled);
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        //sleepButton.setEnabled(false);
    }//GEN-LAST:event_sleepButtonActionPerformed

    /**
     * Takes a dog in the arrayList, removes it from the arrayList, and sets the
     * current dog to the previous dog in the arrayList
     *
     * If there is only one dog in the arrayList and the user wants to remove a
     * dog, all buttons will be disabled except new and open, and stats will be
     * cleared
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        messageLabel.setText("");

        //Dialog get name
        Object[] possibilities = new Object[dogs.size()];
        int index = 0;

        for (Dog dog : dogs) {
            possibilities[index] = dog.getName();
            index++;
        }

        String dogName = (String) JOptionPane.showInputDialog(
                displayPanel,
                "Select a dog from the list below",
                "Select dog",
                JOptionPane.PLAIN_MESSAGE,
                null,
                possibilities,
                possibilities[0]);

        //System.out.println(dogName);
        if (dogName != null) {
            if (dogs.size() >= 1) {
                for (int i = 0; i < dogs.size(); i++) {
                    if (dogName.equals(dogs.get(i).getName())) {
                        dogs.remove(i);
                        if (currentDog > 0) {
                            currentDog = i - 1;
                            messageLabel.setText("Hello! My name is " + dogs.get(currentDog).getName() + ".");
                            updateStats();
                        } else {
                            if (dogs.size() > 1) {
                                currentDog = 0;
                                messageLabel.setText("Hello! My name is " + dogs.get(currentDog).getName() + ".");
                                updateStats();
                            } else {
                                disableButtons();
                                changePicture("release");
                                clearStats();
                                //updateStats();
                                newDogButton.setEnabled(true);
                                openButton.setEnabled(true);
                            }
                        }
                    }
                }
            }
        } else {
            messageLabel.setText("Action canceled.");
        }

    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * Adds new spot in dogs array list and sets current dog to the dog that was
     * just created
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void newDogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDogButtonActionPerformed
        //Name suggestions
        Object[] possibilities = {"Spot", "Fido", "Lady", "Cooper", "Daisy",
            "Bella", "Tim", "Shadow", "Charlie", "Buddy", "Max", "Old Yeller",
            "Ellie", "Peanut", "Leroy", "1991 Apple Quadra 900", "Aiden",
            "Raccoon", "Cat", "Dog"};

        String dogName = (String) JOptionPane.showInputDialog(controlPanel,
                "Please enter a dog name", "New Dog",
                JOptionPane.PLAIN_MESSAGE,
                null,
                null,
                possibilities[dogs.size() % possibilities.length]);

        //If a string was returned, say so.
        if ((dogName != null) && (dogName.length() > 0) && (dogName.charAt(0) != ' ')) {
            boolean poopEnabled = poopButton.isEnabled();
            dogs.add(new Dog(this, dogName));
            currentDog = dogs.size() - 1;

            enableButtons(poopEnabled);
            changePicture("default");
            messageLabel.setText("Hello! My name is " + dogs.get(currentDog).getName() + ".");

            if (dogs.size() >= POUND_SIZE) {
                newDogButton.setEnabled(false);
            }

            updateStats();
        }

    }//GEN-LAST:event_newDogButtonActionPerformed

    /**
     * Plays run animation and disables buttons while playing the animation,
     * then enables all buttons that were previously enabled
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        boolean poopEnabled = poopButton.isEnabled();

        messageLabel.setText("");
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        disableButtons();
        dogs.get(currentDog).run(4);
        enableButtons(poopEnabled);
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_runButtonActionPerformed

    /**
     * Plays poop animation and disables buttons while playing the animation,
     * then disables poop button but enables all buttons that were previously
     * enabled
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void poopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poopButtonActionPerformed
        boolean poopEnabled = poopButton.isEnabled();

        messageLabel.setText("");
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        disableButtons();
        changePicture("poop");
        dogs.get(currentDog).poop();
        enableButtons(poopEnabled);
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        poopButton.setEnabled(false);
    }//GEN-LAST:event_poopButtonActionPerformed

    /**
     * Plays poop animation and disables buttons while playing the animation,
     * then enables all buttons that were previously enabled
     *
     * @param evt
     */
    private void peeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peeButtonActionPerformed
        boolean poopEnabled = poopButton.isEnabled();
        messageLabel.setText("");
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        disableButtons();
        changePicture("pee");
        dogs.get(currentDog).pee();
        enableButtons(poopEnabled);
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_peeButtonActionPerformed

    /**
     * Gets dog to let go of whatever they are currently holding
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void letGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_letGoButtonActionPerformed
        messageLabel.setText("");
        Object[] options = {"Yes", "No"};

        //Returns option picked as index in the array
        int optionSelected = JOptionPane.showOptionDialog(displayPanel,
                "Do you want " + dogs.get(currentDog).getName() + " to let go of what they are holding?",
                "Let Go",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

        if (optionSelected == 0) {
            boolean poopEnabled = poopButton.isEnabled();

            controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            disableButtons();
            changePicture("default");
            enableButtons(poopEnabled);
            controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));

            letGoButton.setEnabled(false);
        } else {
            messageLabel.setText("Action canceled.");
        }
    }//GEN-LAST:event_letGoButtonActionPerformed

    /**
     * Pops up a dialog to allow dog to fetch something, then plays run
     * animation and dog fetches whatever user selects
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void fetchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fetchButtonActionPerformed
        messageLabel.setText("");

        Object[] options = {"Newspaper", "Stick", "Cancel"};

        //Returns option picked as index in the array
        int optionSelected = JOptionPane.showOptionDialog(displayPanel,
                "Pick something for " + dogs.get(currentDog).getName() + " to fetch!",
                "Fetch",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[2]);

        if (optionSelected != 2) {
            boolean poopEnabled = poopButton.isEnabled();
            controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            disableButtons();

            dogs.get(currentDog).run(4);
            //dogs.get(currentDog).fetch(optionSelected);
            if (optionSelected == 1) {
                changePicture("fetch2");
            } else if (optionSelected == 0) {
                changePicture("fetch1");
            }

            enableButtons(poopEnabled);
            letGoButton.setEnabled(true);
            controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        } else {
            messageLabel.setText("Action canceled.");
        }

    }//GEN-LAST:event_fetchButtonActionPerformed

    /**
     * Sets dog's picture to default and updates stats
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void sitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sitButtonActionPerformed
        boolean poopEnabled = poopButton.isEnabled();
        messageLabel.setText("");
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        disableButtons();
        changePicture("default");
        dogs.get(currentDog).sit();
        enableButtons(poopEnabled);
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_sitButtonActionPerformed

    /**
     * Opens a dialog that gives you the choice to either open a dog (.dog file)
     * in the current pound, or to open an arrayList of dogs (.pnd file)
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        messageLabel.setText("");
        Object[] options = {"Dog", "Pound", "Cancel"};

        //Returns option picked as index in the array
        int openChoice = JOptionPane.showOptionDialog(displayPanel,
                "What would you like to open?",
                "Open",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

        if (openChoice == 0) { //Opening a dog
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter dogFilter = new FileNameExtensionFilter("dog files (*.dog)", "dog");
            fileChooser.addChoosableFileFilter(dogFilter);
            fileChooser.setFileFilter(dogFilter);

            if (fileChooser.showOpenDialog(displayPanel) == JFileChooser.APPROVE_OPTION) {
                File fileName = fileChooser.getSelectedFile();
                String filePath = fileName.getAbsolutePath();

                try {
                    ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(fileName));
                    Dog dog = (Dog) inputStream.readObject();
                    inputStream.close();

                    if (dogs.size() > 0) {
                        dogs.set(currentDog, dog);
                    } else {
                        dogs.add(dog);
                    }

                } catch (IOException e) {
                    messageLabel.setText("Error Opening Dog!"); //maybe change to dialog
                    e.printStackTrace();
                } catch (ClassNotFoundException e) {
                    messageLabel.setText("Error! File not a Dog file!"); //maybe change to dialog
                    e.printStackTrace();
                }
            }

        } else if (openChoice == 1) { //Opening a pound (all dogs not gui)
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter poundFilter = new FileNameExtensionFilter("pound files (*.pnd)", "pnd");
            fileChooser.addChoosableFileFilter(poundFilter);
            fileChooser.setFileFilter(poundFilter);

            if (fileChooser.showOpenDialog(displayPanel) == JFileChooser.APPROVE_OPTION) {
                File fileName = fileChooser.getSelectedFile();
                String filePath = fileName.getAbsolutePath();

                try {
                    ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(fileName));
                    ArrayList<Dog> tempDogs = (ArrayList<Dog>) inputStream.readObject();
                    inputStream.close();

                    dogs = tempDogs;
                    currentDog = 0;
                } catch (IOException e) {
                    messageLabel.setText("Error Opening Pound!"); //maybe change to dialog
                    e.printStackTrace();
                } catch (ClassNotFoundException e) {
                    messageLabel.setText("Error! File not a Pound file!"); //maybe change to dialog
                    e.printStackTrace();
                }
            }
        } else {
            messageLabel.setText("Action canceled.");
            return;
        }

        for (Dog dog : dogs) {
            dog.setPound(this);
        }
        updateStats();
        changePicture("default");
        boolean poopEnabled = poopButton.isEnabled();
        enableButtons(poopEnabled);
        messageLabel.setText("Hello! My name is " + dogs.get(currentDog).getName() + ".");
    }//GEN-LAST:event_openButtonActionPerformed

    /**
     * Opens a dialog and gives user option to save either one dog in current
     * pound (.dog file) or all dogs in current pound (.pnd file)
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        messageLabel.setText("");
        Object[] options = {"Dog", "Pound", "Cancel"};

        //Returns option picked as index in the array
        int saveChoice = JOptionPane.showOptionDialog(displayPanel,
                "What would you like to save?",
                "Save",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[0]);

        if (saveChoice == 0) { //Saving a dog
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter dogFilter = new FileNameExtensionFilter("dog files (*.dog)", "dog");
            fileChooser.addChoosableFileFilter(dogFilter);
            fileChooser.setFileFilter(dogFilter);

            if (fileChooser.showSaveDialog(displayPanel) == JFileChooser.APPROVE_OPTION) {
                File fileName = fileChooser.getSelectedFile();
                String filePath = fileName.getAbsolutePath();

                if (!filePath.endsWith(".dog")) {
                    fileName = new File(filePath + ".dog");
                }

                try {
                    ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(fileName));
                    outputStream.writeObject(dogs.get(currentDog));
                    outputStream.close();
                } catch (IOException e) {
                    messageLabel.setText("Error Saving Dog!"); //maybe change to dialog
                    e.printStackTrace();
                }
            }

        } else if (saveChoice == 1) { //Saving a pound (all dogs not gui)
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter poundFilter = new FileNameExtensionFilter("pound files (*.pnd)", "pnd");
            fileChooser.addChoosableFileFilter(poundFilter);
            fileChooser.setFileFilter(poundFilter);

            if (fileChooser.showSaveDialog(displayPanel) == JFileChooser.APPROVE_OPTION) {
                File fileName = fileChooser.getSelectedFile();
                String filePath = fileName.getAbsolutePath();

                if (!filePath.endsWith(".pnd")) {
                    fileName = new File(filePath + ".pnd");
                }

                try {
                    ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(fileName));
                    outputStream.writeObject(dogs);
                    outputStream.close();
                } catch (IOException e) {
                    messageLabel.setText("Error Saving Pound!"); //maybe change to dialog
                    e.printStackTrace();
                }
            }
        } else {
            messageLabel.setText("Action canceled.");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * Allows user to update dog's information
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        messageLabel.setText("");
        updateInfo();
    }//GEN-LAST:event_updateButtonActionPerformed

    /**
     * Allows user to select a dog in the current pound, and update the JFrame
     * to display the user selection, with change in dog stats
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        messageLabel.setText("");

        //Dialog get name
        Object[] possibilities = new Object[dogs.size()];
        int index = 0;

        for (Dog dog : dogs) {
            possibilities[index] = dog.getName();
            index++;
        }

        String dogName = (String) JOptionPane.showInputDialog(
                displayPanel,
                "Select a dog from the list below",
                "Select dog",
                JOptionPane.PLAIN_MESSAGE,
                null,
                possibilities,
                possibilities[0]);

        //System.out.println(dogName);
        if (dogName != null) {
            for (int i = 0; i < dogs.size(); i++) {
                if (dogName.equals(dogs.get(i).getName())) {
                    currentDog = i;
                    messageLabel.setText("Hello! My name is " + dogs.get(currentDog).getName() + ".");
                    updateStats();
                }
            }
        } else {
            messageLabel.setText("Action canceled.");
        }
    }//GEN-LAST:event_selectButtonActionPerformed

    /**
     * Dog growls and attacks user whenever button is clicked
     *
     * @param evt - event that calls method and is otherwise unused
     */
    private void attackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attackButtonActionPerformed
        boolean poopEnabled = poopButton.isEnabled();

        messageLabel.setText("");
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        disableButtons();
        changePicture("beast");
        dogs.get(currentDog).attack();
        enableButtons(poopEnabled);
        controlPanel.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        poopButton.setEnabled(false);
    }//GEN-LAST:event_attackButtonActionPerformed

    /**
     * Changes picture in the displayPanel's icon label to display what the dog
     * is currently doing
     *
     * @param dogPicture - String datatype of what the dog is currently doing
     */
    public void changePicture(String dogPicture) {
        iconLabel.setIcon(new ImageIcon(getClass().getResource("dog1s20" + dogPicture + ".png")));
    }

    /**
     * Enables all buttons either conditionally (e.g. eat) or unconditionally
     * (e.g. bark), and forces panels to paint immediately
     *
     * @param poopEnabled - boolean value of poop button's enabled status when
     * method is called; this is so that the poop button doesn't disable until
     * you select the poop button
     *
     */
    public void enableButtons(boolean poopEnabled) {
        runButton.setEnabled(true);
        barkButton.setEnabled(true);

        if (dogs.get(currentDog).getHungerLevel() > 0) {
            eatButton.setEnabled(true);
        }
        letGoButton.setEnabled(false);

        if (!poopEnabled) {
            poopButton.setEnabled(false);
        } else {
            poopButton.setEnabled(true);
        }

        peeButton.setEnabled(true);

        if (dogs.get(currentDog).getEnergyLevel() < 100) {
            sleepButton.setEnabled(true);
        }

        if (dogs.get(currentDog).getAggressionLevel() < 75) {
            attackButton.setEnabled(true);
        }
        fetchButton.setEnabled(true);
        sitButton.setEnabled(true);
        deleteButton.setEnabled(true);
        selectButton.setEnabled(true);
        saveButton.setEnabled(true);
        updateButton.setEnabled(true);
        openButton.setEnabled(true);

        if (dogs.size() < POUND_SIZE) {
            newDogButton.setEnabled(true);
        }

        if (dogs.get(currentDog).getHungerLevel() > 75) {
            disableButtons();
            openButton.setEnabled(true);
            newDogButton.setEnabled(true);
            eatButton.setEnabled(true);
        }
        updatePanels();
    }

    /**
     * Disables all buttons unconditionally and forces panels to paint
     * immediately
     */
    public void disableButtons() {
        runButton.setEnabled(false);
        barkButton.setEnabled(false);
        eatButton.setEnabled(false);
        letGoButton.setEnabled(false);
        poopButton.setEnabled(false);
        peeButton.setEnabled(false);
        sleepButton.setEnabled(false);
        attackButton.setEnabled(false);
        fetchButton.setEnabled(false);
        sitButton.setEnabled(false);
        deleteButton.setEnabled(false);
        selectButton.setEnabled(false);
        saveButton.setEnabled(false);
        updateButton.setEnabled(false);
        openButton.setEnabled(false);
        newDogButton.setEnabled(false);

        updatePanels();

    }

    /**
     * Updates all labels and progress bars within stats panel, and forces all
     * panels to paint immediately
     */
    public void updateStats() {
        nameLabel.setText("Name: " + dogs.get(currentDog).getName());
        breedLabel.setText("Breed: " + dogs.get(currentDog).getBreed());
        colorLabel.setText("Color: " + dogs.get(currentDog).getFurColor());
        ageLabel.setText("Age: " + dogs.get(currentDog).getAge());
        heightLabel.setText("Height: " + String.format("%.2f", dogs.get(currentDog).getHeight()));
        weightLabel.setText("Weight: " + String.format("%.2f", dogs.get(currentDog).getWeight()));
        genderLabel.setText("Gender: " + dogs.get(currentDog).getGender());

        if (dogs.get(currentDog).getIsFixed()) {
            fixedLabel.setText("Spayed/Neutered: Yes");
        } else {
            fixedLabel.setText("Spayed/Neutered: No");
        }

        if (dogs.get(currentDog).getIsTrained()) {
            trainedLabel.setText("Trained: Yes");
        } else {
            trainedLabel.setText("Trained: No");
        }

        String stringDescription = "";
        ArrayList<String> description = dogs.get(currentDog).getDescription();
        for (int i = 0; i < description.size(); i++) {
            stringDescription += (i + 1) + ". " + description.get(i) + "\n";
        }
        descriptionTextArea.setText(stringDescription);

        dogs.get(currentDog).getDescription();
        energyProgressBar.setValue(dogs.get(currentDog).getEnergyLevel());
        hungerProgressBar.setValue(dogs.get(currentDog).getHungerLevel());
        aggressionProgressBar.setValue(dogs.get(currentDog).getAggressionLevel());
        updatePanels();
    }

    /**
     * Sets all labels in the stats panel to empty, and forces panels to paint
     * immediately
     */
    public void clearStats() {
        nameLabel.setText("Name: ");
        breedLabel.setText("Breed: ");
        colorLabel.setText("Color: ");
        ageLabel.setText("Age: ");
        heightLabel.setText("Height: ");
        weightLabel.setText("Weight: ");
        genderLabel.setText("Gender: ");
        fixedLabel.setText("Spayed/Neutered: ");
        trainedLabel.setText("Trained: ");
        descriptionTextArea.setText("");
        energyProgressBar.setValue(0);
        hungerProgressBar.setValue(0);
        aggressionProgressBar.setValue(0);
        updatePanels();
    }

    /**
     * When the update button is clicked, opens a dialog that allows the user to
     * update anything in the stats panel
     *
     * A switch statement is used so that the GUI only updates what the user
     * selects
     */
    public void updateInfo() {
        Object[] updateOptions = {"Name", "Breed", "Color", "Age", "Height", "Weight",
            "Gender", "Spayed/Neutered", "Trained", "Description"};
        String updateChoice = (String) JOptionPane.showInputDialog(displayPanel,
                "What do you want to update?",
                "Update Dog Information",
                JOptionPane.PLAIN_MESSAGE,
                null,
                updateOptions,
                updateOptions[updateOptions.length - 1]);

        //If a string was returned, say so.
        if ((updateChoice != null) && (updateChoice.length() > 0)) {
            switch (updateChoice) {
                case "Name":
                    Object[] nameSuggestions = {"Spot", "Fido", "Lady", "Cooper", "Daisy",
                        "Bella", "Tim", "Shadow", "Charlie", "Buddy", "Max", "Old Yeller",
                        "Ellie", "Peanut", "Leroy", "1991 Apple Quadra 900", "Aiden",
                        "Raccoon", "Cat", "Dog"};

                    String dogName = (String) JOptionPane.showInputDialog(displayPanel,
                            "Please enter a dog name.", "Update Dog Information",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            null,
                            nameSuggestions[dogs.size() % nameSuggestions.length]);

                    //If a string was returned, say so.
                    if ((dogName != null) && (dogName.length() > 0) && (dogName.charAt(0) != ' ')) {
                        dogs.get(currentDog).setName(dogName);
                        updateStats();
                        return;
                    }

                    messageLabel.setText("Action canceled.");
                    break;
                case "Breed":
                    String breed = (String) JOptionPane.showInputDialog(displayPanel,
                            "Please enter your dog's breed.", "Update Dog Information",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            null,
                            "Mutt");

                    if ((breed != null) && (breed.length() > 0) && (breed.charAt(0) != ' ')) {
                        dogs.get(currentDog).setBreed(breed);
                        updateStats();
                        return;
                    }

                    messageLabel.setText("Action canceled.");
                    break;
                case "Color":
                    String color = (String) JOptionPane.showInputDialog(displayPanel,
                            "Please enter your dog's color.", "Update Dog Information",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            null,
                            "Brown");

                    if ((color != null) && (color.length() > 0) && (color.charAt(0) != ' ')) {
                        dogs.get(currentDog).setFurColor(color);
                        updateStats();
                        return;
                    }//Textfield
                    messageLabel.setText("Action canceled.");
                    break;
                case "Age":
                    //Spinner
                    SpinnerNumberModel spinnerModel
                            = new SpinnerNumberModel(dogs.get(currentDog).getAge(),
                                    0, 30, 1);

                    JSpinner spinner = new JSpinner(spinnerModel);

                    int ageOption = JOptionPane.showOptionDialog(displayPanel,
                            spinner, "Update Dog Information",
                            JOptionPane.OK_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            null,
                            dogs.get(currentDog).getAge());

                    if (ageOption == JOptionPane.OK_OPTION) {
                        dogs.get(currentDog).setAge((int) spinner.getValue());
                        updateStats();
                        return;
                    }
                    messageLabel.setText("Action canceled.");
                    break;
                case "Height":
                    String height = (String) JOptionPane.showInputDialog(displayPanel,
                            "Please enter the dog's height.", "Update Dog Information",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            null,
                            dogs.get(currentDog).getHeight());

                    //If a string was returned, say so.
                    if ((height != null) && (height.length() > 0)) {
                        if (isNumeric(height)) {
                            if (isNumeric(height)) {
                                dogs.get(currentDog).setWeight(Double.parseDouble(height));
                                updateStats();
                                return;
                            }
                        }
                    }
                    messageLabel.setText("Action canceled.");
                    break;
                case "Weight":
                    String weight = (String) JOptionPane.showInputDialog(displayPanel,
                            "Please enter the dog's weight.", "Update Dog Information",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            null,
                            dogs.get(currentDog).getWeight());

                    //If a string was returned, say so.
                    if ((weight != null) && (weight.length() > 0)) {
                        if (isNumeric(weight)) {
                            if (isNumeric(weight)) {
                                dogs.get(currentDog).setWeight(Double.parseDouble(weight));
                                updateStats();
                                return;
                            }
                        }
                    }
                    messageLabel.setText("Action canceled.");
                    break;
                case "Gender":
                    Object[] genders = {"Male", "Female", "Cancel"};

                    //Returns option picked as index in the array
                    int updateGender = JOptionPane.showOptionDialog(displayPanel,
                            "Change the dog's gender",
                            "Update Dog Information",
                            JOptionPane.YES_NO_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            genders,
                            genders[0]);

                    if (updateGender == 0) {
                        dogs.get(currentDog).setGender("Male");
                        updateStats();
                        return;
                    } else if (updateGender == 1) {
                        dogs.get(currentDog).setGender("Female");
                        updateStats();
                        return;
                    }

                    messageLabel.setText("Action canceled.");
                    break;
                case "Spayed/Neutered":
                    Object[] fixedOptions = {"Yes", "No", "Cancel"};

                    //Returns option picked as index in the array
                    int updateIsFixed = JOptionPane.showOptionDialog(displayPanel,
                            "Has the dog been fixed?",
                            "Update Dog Information",
                            JOptionPane.YES_NO_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            fixedOptions,
                            fixedOptions[0]);

                    if (updateIsFixed == 0) {
                        dogs.get(currentDog).setIsFixed(true);
                        updateStats();
                        return;
                    } else if (updateIsFixed == 1) {
                        dogs.get(currentDog).setIsFixed(false);
                        updateStats();
                        return;
                    }

                    messageLabel.setText("Action canceled.");
                    break;
                case "Trained":
                    Object[] trainedOptions = {"Yes", "No", "Cancel"};

                    //Returns option picked as index in the array
                    int updateIsTrained = JOptionPane.showOptionDialog(displayPanel,
                            "Has the dog been trained?",
                            "Update Dog Information",
                            JOptionPane.YES_NO_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            trainedOptions,
                            trainedOptions[0]);

                    if (updateIsTrained == 0) {
                        dogs.get(currentDog).setIsTrained(true);
                        updateStats();
                        return;
                    } else if (updateIsTrained == 1) {
                        dogs.get(currentDog).setIsTrained(false);
                        updateStats();
                        return;
                    }

                    messageLabel.setText("Action canceled.");
                    break;
                case "Description":
                    Object[] options = {"Add", "Remove", "Cancel"};

                    //Returns option picked as index in the array
                    int updateDescription = JOptionPane.showOptionDialog(displayPanel,
                            "Change the dog's description",
                            "Update Dog Information",
                            JOptionPane.YES_NO_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE,
                            null,
                            options,
                            options[0]);

                    if (updateDescription == 0) {
                        //add - text field
                        String newDescription = (String) JOptionPane.showInputDialog(displayPanel,
                                "Please enter the addition to the description.", "Update Dog Information",
                                JOptionPane.PLAIN_MESSAGE,
                                null,
                                null,
                                null);

                        //If a string was returned, say so.
                        if ((newDescription != null) && (newDescription.length() > 0)) {
                            dogs.get(currentDog).addIssue(newDescription);
                            updateStats();
                            return;
                        }
                    } else if (updateDescription == 1) {
                        //remove
                        if (dogs.get(currentDog).getDescription().size() > 0) {
                            Object[] currentIssues = dogs.get(currentDog).getDescription().toArray();
                            String removeChoice = (String) JOptionPane.showInputDialog(displayPanel,
                                    "Which issue would you like to remove?",
                                    "Update Dog Information",
                                    JOptionPane.PLAIN_MESSAGE,
                                    null,
                                    currentIssues,
                                    currentIssues[currentIssues.length - 1]);

                            //If a string was returned, say so.
                            if ((removeChoice != null) && (removeChoice.length() > 0)) {
                                dogs.get(currentDog).removeIssue(removeChoice);
                                updateStats();
                                return;
                            }

                            //break;
                        } else {
                            messageLabel.setText("You can't remove something that doesn't exist :)");
                            break;
                        }
                    }
                    messageLabel.setText("Action canceled.");
            }
        } else {
            messageLabel.setText("Action canceled.");
        }
    }

    /**
     * Method that paints changes in panels immediately
     */
    public void updatePanels() {
        displayPanel.paintImmediately(0, 0, displayPanel.getWidth(), displayPanel.getHeight());
        controlPanel.paintImmediately(0, 0, controlPanel.getWidth(), controlPanel.getHeight());
        statsPanel.paintImmediately(0, 0, statsPanel.getWidth(), statsPanel.getHeight());
    }

    /**
     * Looks to a string and sees if can be converted to double
     *
     * @param text String that is being tested
     * @return boolean false if is not double, otherwise return boolean true
     */
    public boolean isDouble(String text) {
        double newDouble = 0;
        try {
            newDouble = Double.valueOf(text);
        } catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

    /**
     * Looks to a string and sees if can be converted to integer
     *
     * @param text String that is being tested
     * @return false if is not an integer, otherwise return boolean true
     */
    public boolean isInteger(String text) {
        int newInt = 0;
        try {
            newInt = Integer.valueOf(text);
        } catch (NumberFormatException e) {
            return false;
        }
        return true;
    }

    /**
     * Sees if a string is a number by calling other methods
     *
     * @param text String that is being text
     * @return false if is not a number, otherwise return boolean true
     */
    public boolean isNumeric(String text) {
        return (isDouble(text) || isInteger(text));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pound.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pound.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pound.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pound.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pound().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ageLabel;
    private javax.swing.JLabel aggressionLabel;
    private javax.swing.JProgressBar aggressionProgressBar;
    private javax.swing.JButton attackButton;
    private javax.swing.JButton barkButton;
    private javax.swing.JLabel breedLabel;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JButton eatButton;
    private javax.swing.JLabel energyLabel;
    private javax.swing.JProgressBar energyProgressBar;
    private javax.swing.JButton fetchButton;
    private javax.swing.JLabel fixedLabel;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JLabel hungerLabel;
    private javax.swing.JProgressBar hungerProgressBar;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton letGoButton;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton newDogButton;
    private javax.swing.JButton openButton;
    private javax.swing.JButton peeButton;
    private javax.swing.JButton poopButton;
    private javax.swing.JButton runButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton selectButton;
    private javax.swing.JButton sitButton;
    private javax.swing.JButton sleepButton;
    private javax.swing.JPanel statsPanel;
    private javax.swing.JLabel trainedLabel;
    private javax.swing.JButton updateButton;
    private javax.swing.JLabel weightLabel;
    // End of variables declaration//GEN-END:variables

}
